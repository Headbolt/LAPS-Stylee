#!/bin/sh
#
###############################################################################################################################################
#
# HISTORY
#
#	Version: 1.0 - 13/12/2018
#
#	- 13/12/2018 - Created by combining and modifying Multiple Pe-Exsting Scripts and ideas from Web Research
#
#   - This script will randomize the password of the specified user account and post the password to the LAPS Extention Attribute in JAMF Pro.
#
###############################################################################################################################################
#
# DEFINE VARIABLES & READ IN PARAMETERS
#
###############################################################################################################################################
#
resetUser=$4
apiURL=$5
apiUser=$6
apiPass=$7
adminUser=$8
adminPass=$9
ExtensionAttributeName=${10}
#
ScriptName="ZZ 21 - Management - Change Local Administrator Password and Store in JAMF (LAPS Style)"
#
extAttName=$(echo "\"${ExtensionAttributeName}"\")
udid=$(/usr/sbin/system_profiler SPHardwareDataType | /usr/bin/awk '/Hardware UUID:/ { print $3 }')
jamf_binary="/usr/local/bin/jamf"
FVstatus=$(fdesetup status)
#
newPass=$(openssl rand -base64 10 | tr -d OoIi1lLS | head -c12;echo)
#
###############################################################################################################################################
#
#            ┌─── openssl is used to create
#            │	a random Base64 string
#            │                    ┌── remove ambiguous characters
#            │                    │
# ┌──────────┴──────────┐	  ┌───┴────────┐
# openssl rand -base64 10 | tr -d OoIi1lLS | head -c12;echo
#                                            └──────┬─────┘
#                                                   │
#             prints the first 12 characters  ──────┘
#             of the randomly generated string
#
#
###############################################################################################################################################
#
# SCRIPT CONTENTS - DO NOT MODIFY BELOW THIS LINE
#
###############################################################################################################################################
#
# Defining Functions
#
###############################################################################################################################################
#
# Verifiy all Required Parameters are set.
#
ParameterCheck(){
#
echo "Checking parameters."
#
#
# Outputting a Blank Line for Reporting Purposes
echo
#
# Verify parameters are present
#
if [ "$resetUser" == "" ]
	then
	    echo "Error:  The parameter 'Target User' is blank.  Please specify a user to reset."
        ScriptEnd
        exit 1
fi
#
if [ "$apiURL" == "" ]
	then
	    echo "Error:  The parameter 'API URL' is blank.  Please specify a URL."
		ScriptEnd
        exit 1
fi
#
if [ "$apiUser" == "" ]
	then
	    echo "Error:  The parameter 'API Username' is blank.  Please specify a user."
	    ScriptEnd
        exit 1
fi
#
if [ "$apiPass" == "" ]
	then
	    echo "Error:  The parameter 'API Password' is blank.  Please specify a password."
	    ScriptEnd
        exit 1
fi
#
if [ "$adminUser" == "" ]
	then
	    echo "Error:  The parameter 'FileVault Admin User' is blank.  Please specify a user."
	    ScriptEnd
        exit 1
fi
#
if [ "$adminPass" == "" ]
	then
	    echo "Error:  The parameter 'FileVault Admin Password' is blank.  Please specify a password."
	    ScriptEnd
        exit 1
fi
#
echo Parameters Verified.
#
}
#
###############################################################################################################################################
#
# Check If User Exists Locally
#
CheckUser (){
#
echo Checking If User $resetUser Exists Locally
#
# Verify resetUser is a local user on the computer
checkUser=`dseditgroup -o checkmember -m $resetUser localaccounts | awk '{ print $1 }'`
#
if [[ "$checkUser" = "yes" ]]
	then
	    echo "$resetUser is a local user on the Computer"
	else
	    echo "Error: $checkUser is not a local user on the Computer!"
        ScriptEnd
	    exit 1
fi
#
}
#
###############################################################################################################################################
#
# Verify the current User Password in JAMF LAPS
#
CheckOldPassword (){
#
echo Grabbing Current Password From JAMF API
#
xmlString="<?xml version=\"1.0\" encoding=\"UTF-8\"?><computer><extension_attributes><extension_attribute><name>$ExtensionAttributeName</name><value>$newPass</value></extension_attribute></extension_attributes></computer>"
#
oldPass=$(curl -s -f -u $apiUser:$apiPass -H "Accept: application/xml" $apiURL/JSSResource/computers/udid/$udid/subset/extension_attributes | xpath "//extension_attribute[name=$extAttName]" 2>&1 | awk -F'<value>|</value>' '{print $2}')
#
if [ "$oldPass" == "" ]
	then
	    echo "No Password is stored in LAPS."
	else
	    echo "A Password was found in LAPS."
fi
#
if [ "$oldPass" != "" ]
	then
		passwdA=`dscl /Local/Default -authonly $resetUser $oldPass`
		#
        if [ "$passwdA" == "" ]
			then
				echo Current Password for User $resetUser is $oldPass
			    echo "Password stored in LAPS is correct for $resetUser."
			else
			    echo "Error: Password stored in LAPS is not valid for $resetUser."
				echo Current Password for User $resetUser is $oldPass
			    oldPass=""
		fi
	else
    	oldpass=$oldpass
fi
}
#
###############################################################################################################################################
#
# Update the User Password
#
RunLAPS (){
#
if [ "$adminUser" == "JAMF" ]
	then
	    echo "JAMF Management Account being used for this process"
        echo "JAMF Password needs to be Reset to a Known Value."
        echo 
        sudo $jamf_binary policy -trigger JAMF-NonComplex
        #
		SectionEnd
fi
#
if [ "$oldPass" == "" ]
	then
		echo "Current password not available, proceeding with forced update."
	    $jamf_binary resetPassword -username $resetUser -password $newPass
	else 
		echo "Updating password for $resetUser."
	    $jamf_binary resetPassword -updateLoginKeychain -username $resetUser -oldPassword $oldPass -password $newPass

fi
#
echo "New Password for User $resetUser will be $newPass"
#
# Outputs User Whose Keychains We Are Going To Delete
echo Deleting Keychains for user $resetUser
#
rm -f -r /Users/$resetUser/Library/Keychains
#
#
if [ "$FVstatus" == "FileVault is Off." ]
	then
    	echo Not going to set it again as FileVault is DISABLED.
	else
		#
        if [ "$(fdesetup list | grep -ic "^${resetUser},")" -eq '0' ]
			then
				echo User $resetUser is not FileVault Enabled
				UserFDE=NO
			else    
				echo User $resetUser is FileVault Enabled
				UserFDE=YES
		fi
		#
		if [ "$UserFDE" == "YES" ]
			then
				os_ver=$(sw_vers -productVersion)
				IFS='.' read -r -a ver <<< "$os_ver"
				echo OS Version = $os_ver
				if [[ "${ver[1]}" -ge 13 ]]
					then
						# Set it again as the user to update FileVault.
						echo "Setting Password again as the user to update FileVault (High Sierra or Higher)."
						#
						echo Changing password again to ensure updating filevault and Secure Token
						#
						sysadminctl -adminUser ${adminUser} -adminPassword ${adminPass} -resetPasswordFor ${resetUser} -newPassword $newPass 
						#
					elif [[ "${ver[1]}" -lt 13 ]]
						then
							# Set it again as the user to update FileVault.
							echo "Setting Password again as the user to update FileVault (Pre High Sierra)."
							sudo -iu ${resetUser} dscl . passwd "/Users/${resetUser}" $newPass $newPass
				fi
				#
			else    
				# Not going to set it again as the user as account is not Enabled for FileVault.
				echo Not going to set it again as the user as account is not Enabled for FileVault.
		fi
		#
fi
}
#
###############################################################################################################################################
#
# Verify the new User Password
#
CheckNewPassword (){
#
echo "Verifying new password for $resetUser."
#
passwdB=`dscl /Local/Default -authonly $resetUser $newPass`
#
if [ "$passwdB" == "" ]
	then
	    echo "New password for $resetUser is verified."
	else
	    echo "Error: Password reset for $resetUser was not successful!"
		echo        
        #
        if [ "$adminUser" == "JAMF" ]
			then
			    echo "JAMF Management Account was used for this process"
		        echo "JAMF Password needs to be Reset to an unknown Complex Value."
		        echo 
		        sudo $jamf_binary policy -trigger JAMF-Complex
		fi
        echo
        #        
        ScriptEnd
	    exit 1
fi
}
#
###############################################################################################################################################
#
#
# Update the LAPS Extention Attribute
#
UpdateAPI (){
#
echo "Recording new password for $resetUser into LAPS."
#
/usr/bin/curl -s -u ${apiUser}:${apiPass} -X PUT -H "Content-Type: text/xml" -d "${xmlString}" "${apiURL}/JSSResource/computers/udid/$udid"
#
sleep 5
#
LAPSpass=$(curl -s -f -u $apiUser:$apiPass -H "Accept: application/xml" $apiURL/JSSResource/computers/udid/$udid/subset/extension_attributes | xpath "//extension_attribute[name=$extAttName]" 2>&1 | awk -F'<value>|</value>' '{print $2}')
#
# Outputting a Blank Line for Reporting Purposes
echo
#
echo "Verifying LAPS password for $resetUser."
passwdC=`dscl /Local/Default -authonly $resetUser $LAPSpass`
#
if [ "$passwdC" == "" ]
	then
	    echo "LAPS password for $resetUser is verified."
	else
	    echo "Error: LAPS password for $resetUser is not correct!"
        ScriptEnd
        exit 1
fi
}
#
###############################################################################################################################################
#
# Section End Function
#
SectionEnd(){
#
# Outputting a Blank Line for Reporting Purposes
echo
#
# Outputting a Dotted Line for Reporting Purposes
echo  -----------------------------------------------
#
# Outputting a Blank Line for Reporting Purposes
echo
#
}
#
###############################################################################################################################################
#
# Script End Function
#
ScriptEnd(){
#
# Outputting a Blank Line for Reporting Purposes
echo
#
Echo Ending Script '"'$ScriptName'"'
#
# Outputting a Blank Line for Reporting Purposes
echo
#
# Outputting a Dotted Line for Reporting Purposes
echo  -----------------------------------------------
#
# Outputting a Blank Line for Reporting Purposes
echo
#
}
#
###############################################################################################################################################
#
# End Of Function Definition
#
###############################################################################################################################################
#
# Beginning Processing
#
###############################################################################################################################################
#
# Outputting a Blank Line for Reporting Purposes
echo
#
ParameterCheck
SectionEnd
#
CheckUser
SectionEnd
#
CheckOldPassword
SectionEnd
#

#
RunLAPS
SectionEnd
#
CheckNewPassword
SectionEnd
#
UpdateAPI
SectionEnd
#
if [ "$adminUser" == "JAMF" ]
	then
		echo "JAMF Management Account was used for this process"
		echo "JAMF Password needs to be Reset to an unknown Complex Value."
		echo 
		sudo $jamf_binary policy -trigger JAMF-Complex
        #
        SectionEnd
fi
#
ScriptEnd
#
exit 0
#
# End Processing
#
###############################################################################################################################################
